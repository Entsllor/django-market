"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

import environ

from project.settings.log_settings import LOGGING_SETTINGS

# Logging settings.
LOGGING = LOGGING_SETTINGS

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# Environ

env = environ.Env()
env.read_env(BASE_DIR / '.env', overwrite=True)
SECRET_KEY = env('DJANGO_SECRET_KEY')

# Allowed hosts
ALLOWED_HOSTS = env('DJANGO_ALLOWED_HOSTS', default='localhost:127.0.0.1').split(':')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Application definition

INSTALLED_APPS = [
    # default apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # third party apps
    'widget_tweaks',
    'django_cleanup',
    'rest_framework',
    # local apps
    'core_app',
    'accounts',
    'market_app',
    'currencies',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    # 'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core_app.context_processors.current_language_processor',
                'currencies.context_processors.local_currency_processor',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DB_ENGINE = env('DB_ENGINE').lower()
DB_NAME = env("DB_NAME", default="")

if 'sqlite' in DB_ENGINE:
    DB_ENGINE = 'django.db.backends.sqlite3'
    if not DB_NAME:
        DB_NAME = BASE_DIR / 'db.sqlite3'
elif 'postgres' in DB_ENGINE:
    DB_ENGINE = 'django.db.backends.postgresql'

DATABASES = {
    "default": {
        "ENGINE": DB_ENGINE,
        "NAME": DB_NAME,
        "USER": env("DB_USER", default=""),
        "PASSWORD": env("DB_PASSWORD", default=""),
        "HOST": env("DB_HOST", default=""),
        "PORT": env("DB_PORT", default=""),
        "TEST": {
            'NAME': env("DB_NAME") + '_test',
        } if "postgresql" in DB_ENGINE else {}
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static/'
STATICFILES_DIRS = [
    BASE_DIR.joinpath('core_app/static'),
    BASE_DIR.joinpath('accounts/static'),
    BASE_DIR.joinpath('market_app/static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
MEDIA_ROOT = BASE_DIR.joinpath('media/')
MEDIA_URL = '/media/'

# Validators
SUPPORTED_IMAGE_FORMATS = ('.jpg', '.jpeg', '.png')
MIN_USER_AGE = 18

# Login

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
LANGUAGES = (
    ('en-us', 'English'),
    ('ru', 'Русский'),
)
LOCALE_PATHS = [BASE_DIR.joinpath('locale')]

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# DRF

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAdminUser"
    ]
}


# Money and currencies
MONEY_DECIMAL_PLACES = 2
MAX_PRODUCT_PRICE_DIGITS_COUNT = 10 + MONEY_DECIMAL_PLACES
MAX_BALANCE_DIGITS_COUNT = 20 + MONEY_DECIMAL_PLACES
DEFAULT_CURRENCY_CODE = 'USD'
EXTRA_CURRENCIES = (
    'RUB',
)
LOCAL_CURRENCIES = {
    'en-us': 'USD',
    'ru': 'RUB'
}
CURRENCIES_SYMBOLS = {
    'USD': '$',
    'RUB': '₽'
}

CURRENCIES = (DEFAULT_CURRENCY_CODE,) + EXTRA_CURRENCIES
